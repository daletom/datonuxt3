import { defu } from "defu";
import { GraphQLClient } from "graphql-request";
import { deepmerge } from "../utils.mjs";
import { getSdk as gqlSdk } from "#build/gql-sdk";
import { ref, useNuxtApp, useRuntimeConfig, useRequestHeaders } from "#imports";
const DEFAULT_STATE = { proxyCookies: true };
const useGqlState = (state, reset) => {
  const nuxtApp = useNuxtApp();
  if (!nuxtApp._gqlState) {
    nuxtApp._gqlState = ref(Object.assign({}, DEFAULT_STATE));
  }
  if (state) {
    if (state.options) {
      const optionKeys = Object.keys(state.options || {});
      for (const k of optionKeys) {
        if (!nuxtApp._gqlState.value.clients?.[k]) {
          delete state.options[k];
        }
      }
    }
    if (reset === void 0) {
      reset = !Object.keys(state).length;
    }
    if (reset) {
      nuxtApp._gqlState.value = Object.assign(DEFAULT_STATE, {
        clients: nuxtApp._gqlState.value.clients
      });
    } else {
      nuxtApp._gqlState.value = deepmerge(nuxtApp._gqlState.value, state);
    }
    const clients = nuxtApp._gqlState.value.clients;
    if (clients) {
      for (const [k, v] of Object.entries(clients)) {
        if (reset) {
          v.options = {};
          continue;
        }
        if (!state?.options?.[k]) {
          continue;
        }
        v.options = nuxtApp._gqlState.value.options[k];
      }
    }
  }
  return nuxtApp._gqlState;
};
const initClients = () => {
  const state = useGqlState();
  const config = useRuntimeConfig();
  const { clients } = deepmerge({}, defu(config?.["graphql-client"], config?.public?.["graphql-client"]));
  state.value.clients = state.value?.clients || {};
  state.value.options = state.value?.options || {};
  for (const [name, v] of Object.entries(clients)) {
    if (state.value?.clients[name]) {
      continue;
    }
    if (!state.value?.options[name]) {
      state.value.options[name] = {};
    }
    const host = process.client && v?.clientHost || v.host;
    const c = new GraphQLClient(host, state.value.options[name]);
    state.value.clients[name] = c;
    if (v?.token?.value) {
      useGqlToken(v.token.value, { client: name });
    }
  }
};
const getClient = (client) => {
  const state = useGqlState();
  if (client && state.value?.clients?.[client]) {
    return client;
  }
  const { clients } = useRuntimeConfig()?.public?.["graphql-client"];
  if (!state.value.clients || !state.value.options) {
    initClients();
  }
  if (!client && Object.keys(clients)?.length) {
    const defaultClient = Object.entries(clients).find(([k, v]) => k === "default" || v?.default);
    if (defaultClient) {
      client = defaultClient[0];
    } else {
      client = Object.keys(clients)[0];
    }
  }
  return client;
};
const useGqlClient = (client) => {
  const state = useGqlState();
  client = getClient(client);
  return state.value.clients[client];
};
export const useGqlHeaders = (headers, client) => {
  client = getClient(client);
  useGqlState({ options: { [client]: { headers } } });
};
const DEFAULT_AUTH = { type: "Bearer", name: "Authorization" };
export const useGqlToken = (token, opts) => {
  let { client, config } = opts || {};
  client = getClient(client);
  const clientConfig = useRuntimeConfig()?.public?.["graphql-client"]?.clients?.[client];
  config = {
    ...DEFAULT_AUTH,
    ...clientConfig?.token?.name && { name: clientConfig.token.name },
    ...clientConfig?.token?.type !== void 0 && { type: clientConfig.token.type },
    ...config
  };
  const state = useGqlState();
  if (token) {
    useGqlState({
      options: {
        [client]: {
          headers: { [config.name]: `${config.type} ${token}`.trim() }
        }
      }
    });
  } else if (state.value?.options?.[client]?.headers?.[config.name]) {
    delete state.value.options[client].headers[config.name];
  }
};
export const useGqlCors = ({ mode, credentials, client }) => {
  client = getClient(client);
  const corsOptions = {
    ...mode && { mode },
    ...credentials && { credentials }
  };
  useGqlState({ options: { [client]: corsOptions } });
};
export const useGql = (client) => {
  const state = useGqlState();
  const gqlClient = useGqlClient(client);
  if (process.server && state.value?.proxyCookies) {
    const { cookie } = useRequestHeaders(["cookie"]);
    if (cookie) {
      gqlClient.setHeader("cookie", cookie);
    }
  }
  const $gql = gqlSdk(gqlClient);
  return { ...$gql };
};
