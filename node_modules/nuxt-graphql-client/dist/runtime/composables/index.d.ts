import type { GqlClients } from '#build/gql';
import { getSdk as gqlSdk } from '#build/gql-sdk';
/**
 * `useGqlHeaders` allows you to set headers for all subsequent requests.
 *
 * @param {object} headers
 * @param {string} client
 *
 * @example
 * - Set headers for default client
 * ```ts
 * useGqlHeaders({ 'X-Custom-Header': 'Custom Value' })
 * ```
 *
 * - Set headers for a specific client (multi-client mode)
 * ```ts
 * useGqlHeaders({
 *   'X-Custom-Header': 'Custom Value'
 * }, 'my-client')
 * ```
 * */
export declare const useGqlHeaders: (headers: HeadersInit, client?: GqlClients) => void;
interface GqlTokenConfig {
    /**
     * The name of the Authentication token header.
     *
     * @default 'Authorization'
     * */
    name: string;
    /**
     * The HTTP Authentication scheme.
     *
     * @default "Bearer"
     * */
    type?: string;
}
declare type GqlTokenOptions = {
    /**
     * Configure the auth token
     *
     * @default
     * `{ type: 'Bearer', name: 'authorization' }`
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization
     * */
    config?: GqlTokenConfig;
    /**
     * The name of your GraphQL clients.
     * @note defined in `nuxt.config`
     * */
    client?: GqlClients;
};
/**
 * `useGqlToken` adds an Authorization header to every request.
 *
 * @param {string} token
 * @param {object} opts
 * */
export declare const useGqlToken: (token: string, opts?: GqlTokenOptions) => void;
interface GqlCors {
    mode?: RequestMode;
    credentials: RequestCredentials;
    /**
     * The name of your GraphQL client.
     * @note defined in `nuxt.config`
     * */
    client?: GqlClients;
}
/**
 * `useGqlCors` adds CORS headers to every request.
 *
 * @param {object} opts
 * */
export declare const useGqlCors: ({ mode, credentials, client }: GqlCors) => void;
/**
 * @param {string} client
 *
 * @note `client` should match the name of the GraphQL client used for the operation being executed.
 * */
export declare const useGql: (client?: GqlClients) => ReturnType<typeof gqlSdk>;
export {};
